# LMS
% function[]=Adaline(a1,a2,a3,p)
clear all;
close all;
clc;
%--------------------------------------------------------
% 导入训练样本 lms_samp，samp为200*3的矩阵，第一列：横坐标，
% 第二列：纵坐标，第三列：理想输出，X为输入样本，d为理想输出
%--------------------------------------------------------
load lms_samp           % 训练样本
load lms_tstsamp        % 测试样本
N = 200;   M = 100;         % N:样本数，M:循环次数
X = zeros(N,3); 
X(:,[1:2]) = samp(:,[1:2]);    X(:,3)=1;   % 考虑阈值项
d = samp(:,3);
%------------------------
% LMS 算法
%------------------------
R = X'*X/N;   P = d'*X/N;   % R:自相关矩阵,P:互相关向量
Ws = P*R^(-1);          % 最优权向量
Emin = d'*d/N+Ws*R*Ws'-2*P*Ws';  % 最小均方误差
a1 = 0.002; a2 = 0.02; a3 = 0.02; p = 5;
%-------------------------------------------------
% 随机逼近 算法
% a1：步幅系数, E1：固定最小误差，mm1：学习步数
%-------------------------------------------------
E1 = Emin+0.001;W1 = [0,0,0]; tag1 = 0;
for mm1 = 1:M*N
    y = W1*X';
%     y=(y>0)-(y<=0);            % 硬限幅函数
    e1(mm1) = mean((d'-y).^2);     % 求均方误差，判断收敛
    if abs(e1(mm1)) >= E1
       i = mod(mm1-1,200)+1;
       W1 = W1+2*a1*(d(i)-y(i))*X(i,:);    % 调整权值
    else 
       tag1 = 1;
       break;
    end
end
%----------------------------------------------
% 最陡下降 算法
% a2：步幅系数, E2：固定最小误差，mm2：学习步数
%----------------------------------------------
E2 = Emin+0.001;W2 = [0,0,0]; tag2 = 0; % p:每次学习样本数
for m2 = 1:p:M*N
    mm2 = (m2-1)/p+1;
    y = W2*X';
%     y=(y>0)-(y<=0);            % 硬限幅函数
    e2(mm2) = mean((d'-y).^2);   % 求均方误差，判断收敛
    if abs(e2(mm2)) >= E2
       i=mod(m2-1,200)+1;
       for k=i:i+p-1
       W2=W2+2*a2*(d(k)-y(k))*X(k,:);     % 调整权值
    end
    else 
        tag2=1;
        break;
    end
end
%---------------------------------------------
% 严格递推 算法
% a3：步幅系数, E3：固定最小误差，mm3：学习步数
%---------------------------------------------
E3 = Emin+0.001;W3=[0,0,0]; tag3=0;
for mm3=1:1:M
    y=W3*X';
%     y=(y>0)-(y<=0);            % 硬限幅函数
    e3(mm3)=mean((d'-y).^2);   % 求均方误差，判断收敛
    if abs(e3(mm3))>=E3
       for k=1:N
           W3=W3+2*a3*(d(k)-y(k))*X(k,:)/N;  % 调整权值
       end
    else
         tag3=1;
         break;
    end
end
mm1
mm2
mm3       
W1
W2
W3
%---------------------------------------------
% 检验正确率，符号相同则为正确，否则当作分类错误
%---------------------------------------------
XX=zeros(N,3); 
XX(:,[1:2])=samp(:,[1:2]); XX(:,3)=1;
dd=samp(:,3);
YY1=W1*XX'; YY2=W2*XX'; YY3=W3*XX';
% YY1=(YY1>0)-(YY1<=0);         % 硬限幅函数
% YY2=(YY2>0)-(YY2<=0);
% YY3=(YY3>0)-(YY3<=0);
cor1=0; cor2=0; cor3=0;
for i=1:N
    cor1=cor1+(YY1(i)*dd(i)>0);
    cor2=cor2+(YY2(i)*dd(i)>0);
    cor3=cor3+(YY3(i)*dd(i)>0);
end
ratio1=cor1/N;    
ratio2=cor2/N;
ratio3=cor3/N;
%---------------------
% 画误差曲线
%---------------------
figure(1)
plot((1:mm1),e1)
title('随机逼近算法')
figure(2)
plot((1:mm2),e2)
title('最陡下降算法')
figure(3)
plot((1:mm3),e3)
title('严格递推算法')
figure(4)
%---------------------
% 画样本点的分布图
%---------------------
for i=1:N
    if d(i)==1
        plot(samp(i,1),samp(i,2),'ok')
        hold on
    else
        plot(samp(i,1),samp(i,2),'*k')
        hold on
    end
end
alpha=0:pi/50:2*pi;
r=1.7;
x1=r*cos(alpha);
y1=r*sin(alpha);
plot(x1+1,y1+1,'k--')
plot(x1-1,y1-1,'k--')
% rectangle('Position',[1-1.7,1-1.7,2*1.7,2*1.7],'Curvature',[1,1]);
% hold on
% rectangle('Position',[-1-1.7,-1-1.7,2*1.7,2*1.7],'Curvature',[1,1]);
%--------------
% 画分类曲线
%--------------
for i = 1:1201
    xx(i) = (i-600)/200;
    yy1(i) = -W1(1)/W1(2)*xx(i)-W1(3)/W1(2);
    yy2(i) = -W2(1)/W2(2)*xx(i)-W2(3)/W2(2);
    yy3(i) = -W3(1)/W3(2)*xx(i)-W3(3)/W3(2);
    yy4(i) = -Ws(1)/Ws(2)*xx(i)-Ws(3)/Ws(2);
end
% plot(xx,yy1,'k')
% title('随机逼近算法实验')
% axis([-3,3,-3,3])
% plot(xx,yy2,'k')
% title('最陡下降算法实验')
% axis([-3,3,-3,3])
% plot(xx,yy3,'k')
% title('严格递推算法实验')
% axis([-3,3,-3,3])
plot(xx,yy4,'k')
axis([-3,3,-3,3])
% title('最优权矢量算法实验')
% title('Adaline算法实验')
% [V,D]=eig(R); 
% lamda=diag(D)'
